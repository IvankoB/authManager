spring.application.name=authManager

# ????????? LDAP-????????
local.ldap.servers.dc-01.url=ldap://DC-01.uwed.edu:389
local.ldap.servers.dc-01.start-tls=true
local.ldap.servers.dc-01.start-tls-required=true
local.ldap.servers.dc-01.ignore-ssl-verification=true
local.ldap.servers.dc-01.ssl-bundle=dc-01
### ????????? ????????:
# follow* ? ????????? ?? ??????????? (?? ?????????).
# ignore ? ???????????? ?????????.
# throw  ? ??????? ?????????? ??? ????????? ?????????.
local.ldap.servers.dc-01.referral-handling=follow
local.ldap.servers.dc-01.user-dn=cn=vmail,cn=users,dc=uwed,dc=edu
local.ldap.servers.dc-01.password=Vm@vm@vM
local.ldap.servers.dc-01.base=DC=uwed,DC=edu
local.ldap.servers.dc-01.virtual-dn=dc=dc-01,dc=proxy,dc=local
local.ldap.servers.dc-01.ssl-protocols=TLSv1.2
local.ldap.servers.dc-01.ssl-ciphers=TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256

# DC-01 cyphers
###  TLS_RSA_AES_128_CBC_SHA256,TLS_ECDHE_RSA_AES_128_CBC_SHA256
# TLS_RSA_WITH_AES_128_CBC_SHA256
# TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256

# JDK Enabled protocols: [TLSv1.2],
# JDK ciphers: [
# TLS_AES_256_GCM_SHA384
# TLS_AES_128_GCM_SHA256
# TLS_CHACHA20_POLY1305_SHA256
# TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
# TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
# TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
# TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
# TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
# TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
# TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
# TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256
# TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
# TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
# TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
# TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
# TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
# TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
# TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
# TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
# TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
# TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
# TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
# TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
# TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
# TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
# TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
# TLS_DHE_RSA_WITH_AES_256_CBC_SHA
# TLS_DHE_DSS_WITH_AES_256_CBC_SHA
# TLS_DHE_RSA_WITH_AES_128_CBC_SHA
# TLS_DHE_DSS_WITH_AES_128_CBC_SHA
# TLS_RSA_WITH_AES_256_GCM_SHA384
# TLS_RSA_WITH_AES_128_GCM_SHA256
# TLS_RSA_WITH_AES_256_CBC_SHA256
# TLS_RSA_WITH_AES_128_CBC_SHA256
# TLS_RSA_WITH_AES_256_CBC_SHA
# TLS_RSA_WITH_AES_128_CBC_SHA
# TLS_EMPTY_RENEGOTIATION_INFO_SCSV


# ????????? ??????-???????
local.ldap.proxy.port.ldap=389
local.ldap.proxy.port.ldaps=636
local.ldap.proxy.max-message-size=1048576
# optional
local.ldap.proxy.ssl-protocols=TLSv1.2,TLSv1.3
local.ldap.proxy.need-client-auth=false

# ????????? ??????-?????????????
local.ldap.proxy.users[0].dn=cn=ldap-proxy,dc=proxy,dc=local
local.ldap.proxy.users[0].password=ProxyPass123
local.ldap.proxy.users[0].allowed-dns[0]=[*]
local.ldap.proxy.users[1].dn=cn=proxy-user2,dc=proxy,dc=local
local.ldap.proxy.users[1].password=User2Pass
local.ldap.proxy.users[1].allowed-dns[0]=dc=dc-01,dc=proxy,dc=local

# ????????? Tomcat ??? API
server.port=8443
server.ssl.bundle=https
#server.ssl.client-auth=need
server.ssl.client-auth=none

# Certs and keys for HTTPS
# *** don't change this (https) setting NAME since it's hardcoded in the application ***
spring.ssl.bundle.pem.https.keystore.certificate=classpath:certs/locals/fullchain.pem
spring.ssl.bundle.pem.https.keystore.private-key=classpath:certs/locals/privkey.pem

# Certs and keys for serving requests to this LDAP proxy from clients
# *** don't change this (ldaps) setting NAME since it's hardcoded in the application ***
spring.ssl.bundle.pem.ldaps.keystore.certificate=classpath:certs/locals/fullchain.pem
spring.ssl.bundle.pem.ldaps.keystore.private-key=classpath:certs/locals/privkey.pem
#spring.ssl.bundle.pem.ldaps.truststore.certificate=classpath:certs/remotes/client-01.pem

# Certs and keys for proxing LDAPS to MS AD server 'dc-01'
spring.ssl.bundle.pem.dc-01.keystore.certificate=classpath:certs/locals/fullchain.pem
spring.ssl.bundle.pem.dc-01.keystore.private-key=classpath:certs/locals/privkey.pem
spring.ssl.bundle.pem.dc-01.truststore.certificate=classpath:certs/remotes/dc-01-fullchain.pem
#
# public static class Store {
#
#		/**
#		 * Type of the store to create, e.g. JKS.
#		 */
#		private String type;
#
#		/**
#		 * Location or content of the certificate or certificate chain in PEM format.
#		 */
#		@Deprecated
#		private String certificate;
#
#		/**
#		 * Set with location or content of the certificate or certificate chain in PEM format.
#		 */
#		private Set<String> certificates = new HashSet<>();
#
#		/**
#		 * Location or content of the private key in PEM format.
#		 */
#		private String privateKey;
#
#		/**
#		 * Password used to decrypt an encrypted private key.
#		 */
#		private String privateKeyPassword;
#
#		/**
#		 * Whether to verify that the private key matches the public key.
#		 */
#		private boolean verifyKeys;
#
#		public String getType() {
#			return this.type;
#		}
#
#		public void setType(String type) {
#			this.type = type;
#		}
#
#		@Deprecated
#		public String getCertificate() {
#			return this.certificate;
#		}
#
#		@Deprecated
#		public void setCertificate(String certificate) {
#			this.certificate = certificate;
#		}
#
#		public Set<String> getCertificates() {
#			if (this.certificate != null) {
#				Set<String> allCertificates = new HashSet<>(this.certificates);
#				allCertificates.add(this.certificate);
#				return allCertificates;
#			}
#			return this.certificates;
#		}
#
#		public void setCertificates(Set<String> certificates) {
#			this.certificates = certificates;
#		}
#
#		public String getPrivateKey() {
#			return this.privateKey;
#		}
#
#		public void setPrivateKey(String privateKey) {
#			this.privateKey = privateKey;
#		}
#
#		public String getPrivateKeyPassword() {
#			return this.privateKeyPassword;
#		}
#
#		public void setPrivateKeyPassword(String privateKeyPassword) {
#			this.privateKeyPassword = privateKeyPassword;
#		}
#
#		public boolean isVerifyKeys() {
#			return this.verifyKeys;
#		}
#
#		public void setVerifyKeys(boolean verifyKeys) {
#			this.verifyKeys = verifyKeys;
#		}
#
#	}
#
#}
#

# ?????????????? ????????? ???????????
###logging.level.root=DEBUG
###logging.level.javax.net.ssl=DEBUG
###logging.level.org.springframework=DEBUG
###logging.level.edu.uwed.authManager=DEBUG


